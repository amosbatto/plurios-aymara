#!/usr/bin/env python3
'''
plurios es un script utilizado para conseguir información del sistema o cambiar 
la configuración de PluriOS. 

USO:   
plurios OPCIONES 

OPCIONES:
--language LENGUA  Cambiar la lengua de los menus a "castellano" o "aymara".
-l LENGUA          Es necesario ejecutar este script con los privilegios de root
                   (administrador) para cambiar los archivos protegidos de lengua. 
                   
-d DIR             Directorio de donde los archivos de lengua son copiados al 
--source-dir DIR   sistema para cambiar la lengua. Por defecto es 
                   /usr/share/plurios-languages/{DIR_LANG} y sólo es necesario
                   cambiarlo para instalar archivos personalizados
                   
-v                 Mostrar los archivos copiados si es --language o mostrar lshw 
--verbose          si es --info.           
                   
--info             Mostrar información acerca de PluriOS.
-i

--help             Mostrar ayuda acerca de este orden.
-h 

EJEMPLOS:
sudo plurios -l ay
sudo plurios -i 

To build this package: dpkg-deb --build --root-owner-group plurios-languages_0.1-0_all
Autor: Amos Batto <amosbatto@yahoo.com>
Versión: 0.1 (2022-08-26)
Licencia: GPL 3.0 o después
'''
 
import shutil, os, os.path, sys, argparse, pathlib

# Directorio por defecto donde están los archivos de lengua para cambiar el sistema a otra lengua
DIR_LANG = "/usr/share/plurios-languages/"
# Contador de archivos de lengua copiado de DIR_LANG a PluriOS
FilesCopied = 0
 
def main ():
	global FilesCopied
	
	parser = argparse.ArgumentParser(
		description = "plurios es un script utilizado para conseguir información del sistema o \n"\
			"cambiar la configuración de PluriOS.",
		epilog = "EJ: sudo plurios -l ay"
	)
	parser.add_argument(
		"-l", "--language",
		type = str.lower,  
		choices = ['es', 'ay', 'ay-oficial'],
		help = 'Cambiar la lengua de los menus a castellano ("es"), aymara ("ay") o aymara oficial ("ay-oficial").\n'\
			'Es necesario ejecutar este script con sudo o su para cambiar \n'\
			'los archivos protegidos de lengua.'
	)
	parser.add_argument(
		"-d", "--source-dir",
		default = DIR_LANG,
		type=pathlib.Path,
		help = f"Directorio de donde los archivos de lengua son copiados al sistema "\
			f"para cambiar la lengua. Por defecto es {DIR_LANG} y sólo es necesario "\
			f"cambiarlo para instalar archivos personalizados."
	)
	parser.add_argument(
		"-i", "--info",
		action='store_true', #para solo usar un flag sin argumento despues  
		help = 'Listar información acerca del sistema.'
	)
	parser.add_argument(
		"-v", "--verbose",
		action='store_true', #para solo usar un flag sin argumento despues  
		help = "Mostrar los archivos copiados para --language o mostrar lshw para --info."
	)
	
	args = parser.parse_args()
	
	if (args.language):
		startDir = os.path.join(args.source_dir, args.language)
		FilesCopied = 0  
		copyDir(startDir, args)
		print (f"{FilesCopied} archivos de la lengua '{args.language}' fueron instalados.\n"
			"Es necesario hacer logout o refrescar Cinnamon para ver los cambios."
		)
	elif (args.info):
		os.system("lsb_release -a")
		os.system("uname -a")
		
		if (args.verbose):
			os.system("lshw")
	else:
		parser.print_help()


def copyDir (pathDir, args):
	"""Función recursiva para copiar un directorio de archivos de lengua al sistema de PluriOS
	
	sPath: El directorio actual de donde está copiando los archivos. EJ: /usr/share/plurios-languages/ay/usr/share
	args: Los argumentos pasados a script al inicio.
	"""
	global FilesCopied
	
	for sChild in os.listdir(pathDir):                
		sChildPath = os.path.join(pathDir, sChild)
		baseDir = os.path.join(args.source_dir, args.language)
		sTargetPath = sChildPath[ len(baseDir) : ]
		
		if (args.verbose):
			print (sTargetPath)
		
		try:
			if os.path.isfile(sChildPath):
				if os.path.exists(sTargetPath) and os.path.isfile(sTargetPath):
					os.remove(sTargetPath)
				
				shutil.copy2(sChildPath, sTargetPath);
				FilesCopied += 1
				# copy2() no copia el dueño y grupo, pero debe copiar como root:
				#st = os.stat(sChildPath)
				#os.chown(sTargetPath, st.st_uid, st.st_gid)
				
			elif os.path.isdir(sChildPath):
				if not os.path.exists(sTargetPath) or not os.path.isdir(sTargetPath):
					st = os.stat(sChildPath)
					os.mkdir(sTargetPath, st.st_mode) 
				
				copyDir(sChildPath, args)
		except PermissionError:
			exit(f"No tiene permisos para sobre-escribir los archivos de lengua.\n"
				f"Deberia ejecutar: sudo plurios -l {args.language}")


if __name__ == "__main__":
    main()

